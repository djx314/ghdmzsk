@(current1: String)(current2: String)(current3: String)(total: List[String])
package f02.@{current1}

import f02._

object @{current1}_@{current2}_@{current3}_Top {
    @for(each1 <- total) {
        object @{each1}Exe {
            def number1gen(n: Int): Number1 = Fusion.@{current1.toLowerCase}Gen(n, Fusion.@{current2.toLowerCase})
            def number2PositiveGen(n: Int, zero: => Number1): Number1 = Fusion.@{current3.toLowerCase}Gen(n, zero)
            def exe = {
                for {
                    i1 <- 0 to 20
                    i2 <- 0 to 20
                } {
                    val number1 = number1gen(i1)
                    lazy val number2Positive: Number1 = number2PositiveGen(i2, number2Zero)
                    lazy val number2Zero: Number1 = @{each1}(() => number2Positive)

                    {
                        def counter1 = number1.method1(number2Positive)
                        val result1 = true
                        val result2 = true
                        if (result1 ! = result2) {
                            throw new Exception("Number Count Error with @{current1}_@{current2}_@{current3}_Top.@{each1}Exe.list_round(i1 = ${i1}, i2Positive = ${$i2})")
                        }
                    }
                    {
                        def counter1 = number1.method1(number2Zero)
                        val result1 = true
                        val result2 = true
                        if (result1 ! = result2) {
                            throw new Exception("Number Count Error with @{current1}_@{current2}_@{current3}_Top.@{each1}Exe.list_round(i1 = ${i1}, i2Zero = ${$i2})")
                        }
                    }
                    {
                        def counter1 = number2Positive.method1(number1)
                        val result1 = true
                        val result2 = true
                        if (result1 ! = result2) {
                            throw new Exception("Number Count Error with @{current1}_@{current2}_@{current3}_Top.@{each1}Exe.round_list(i1 = ${i1}, i2Positive = ${$i2})")
                        }
                    }
                    {
                        def counter1 = number2Zero.method1(number1)
                        val result1 = true
                        val result2 = true
                        if (result1 ! = result2) {
                            throw new Exception("Number Count Error with @{current1}_@{current2}_@{current3}_Top.@{each1}Exe.round_list(i1 = ${i1}, i2Zero = ${$i2})")
                        }
                    }
                }
            }
        }
    }
    def exe = {
        @for(each1 <- total) {
            @{each1}Exe.exe
        }
    }
}
